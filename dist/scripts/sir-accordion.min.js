'use strict';angular.module('sir-accordion', []).directive('sirAccordion',['$compile','$timeout', function($compile,$timeout){var template=''; return{restrict: 'A', scope:{collection: '=', config: '=?', data: '=?'}, template: template, controller: ('sirAccordionCtrl',['$scope',function ($scope){$scope.config={debug: typeof $scope.config.debug !='undefined' ? $scope.config.debug : false, animDur : ($scope.config.animDur >=200 && document.body.firstElementChild) ? $scope.config.animDur : 0, expandFirst: typeof $scope.config.expandFirst !='undefined' ? $scope.config.expandFirst : false, autoCollapse : typeof $scope.config.autoCollapse !='undefined' ? $scope.config.autoCollapse : true, watchInternalChanges : typeof $scope.config.watchInternalChanges !='undefined' ? $scope.config.watchInternalChanges : false, headerClass: $scope.config.headerClass || '', preHeader: $scope.config.preHeader || '<div class="sir-accordion-vertical-align"><div>', postHeader: $scope.config.postHeader || '</div></div>', topContentClass: $scope.config.topContentClass || '', preTopContent: $scope.config.preTopContent || '', postTopContent: $scope.config.postTopContent || '', bottomContentClass: $scope.config.bottomContentClass || '', preBottomContent: $scope.config.preBottomContent || '', postBottomContent: $scope.config.postBottomContent || ''};}]), link: function(scope,element){var animDur=scope.config.animDur; var header=''; var topContent=''; var bottomContent=''; var item=''; var uniqueIndex=''; var accordionHTML=''; var domHeaders=[]; var domContents=[]; var animating=[]; var currentExpanded='0'; var consoleHighLight='background: #0044CE; color: #fff'; var newScope=null; /* * @ngdoc watch * @description watches changes in the Array provided to build the accordion */ scope.$watch('collection', function(){if (!angular.isArray(scope.collection)){element.html('No collection found'); return;}header=''; topContent=''; bottomContent=''; item=''; uniqueIndex=''; accordionHTML=''; domHeaders=[]; domContents=[]; animating=[]; currentExpanded='0'; accordionHTML=itemRegen(scope.collection, 0, 0, 0); element.html(''); if (newScope){newScope.$destroy(); newScope=null;}newScope=scope.$new(); var compiled=$compile(accordionHTML)(newScope); element.append(compiled); setObjectTree(); scope.$emit('sacDoneLoading');},scope.config.watchInternalChanges); /* * @ngdoc function * @name setObjectTree * @description set 2 Object Arrays containing all headers and contents objects and ids */ var setObjectTree=function(){var element=null; var header=null; var content=null; for (var i=domContents.length - 1; i >=0; i--){element=document.getElementById('sac' + domContents[i]); header=(element.firstElementChild) ? element.firstElementChild : element.firstChild; content=header.nextSibling; domContents[i]={id: element.id, obj: content}; domHeaders[i]={id: element.id, obj: header}; if (element.firstElementChild){domContents[i].obj.firstElementChild.style.transition='all ' + (animDur - 100) + 'ms'; domHeaders[i].obj.style.transition='all ' + (animDur) + 'ms';}};}; /* * @ngdoc function * @name itemRegen * @description Builds up the HTML code for the accordion recursively, given a JSON array * @param{Array}collection * @param{Integer}parentIndex * @param{Integer}currentIndex * @param{Integer}level * @return */ var itemRegen=function(collection, parentIndex, currentIndex, level){if (currentIndex==collection.length){return '';}uniqueIndex=level ? String(parentIndex) + '-' + String(currentIndex + 1) : String(currentIndex + 1); header=scope.config.preHeader + collection[currentIndex].title + scope.config.postHeader; topContent=setContent(scope.config.preTopContent, collection[currentIndex].topContent, scope.config.postTopContent); domContents.push(uniqueIndex); item='<div id="sac' + uniqueIndex + '" > <div class="sir-accordion-header ' + scope.config.headerClass + '" ng-click="expandCollapse('' + uniqueIndex + '')">' + header + '</div>' + '<div class="sir-accordion-content"> <div><div class="' + scope.config.topContentClass + '">' + topContent + '</div>'; if (currentIndex==0){if (level==0){item='<div class="sir-accordion-wrapper">' + item;}else{item='<div class="sir-accordion-group">' + item;}}bottomContent=setContent(scope.config.preBottomContent, collection[currentIndex].bottomContent, scope.config.postBottomContent); if (angular.isArray(collection[currentIndex].subCollection) && collection[currentIndex].subCollection.length){item=item + itemRegen(collection[currentIndex].subCollection, uniqueIndex, 0, level + 1); item=item + '</div><div class="' + scope.config.bottomContentClass + '">' + bottomContent + '</div></div></div></div>';}else{item=item + '</div><div class="' + scope.config.bottomContentClass + '">' + bottomContent + '</div></div></div>';}return item + itemRegen(collection, parentIndex, currentIndex + 1, level);}; /* * @ngdoc function * @name setContent * @description adds leading and traling code to a content before injecting it to the code * @param{String}pre * @param{String}content * @param{String}post * @return{String}content */ var setContent=function(pre,content,post){if (!content){content='';}else{content=pre + content + post;}return content;}; /* * @ngdoc function * @name chainCollapse * @description Collapses an element given a starting id and its parents until a stopLevel is given * @param{String}toCollapse * @param{String}stopLevel * @return */ var chainCollapse=function(toCollapse,stopLevel){if (scope.config.debug) console.log('Chain collapsing'); do{for (var i=domContents.length - 1; i >=0; i--){if (scope.config.autoCollapse && domContents[i].id==('sac' + toCollapse)){toggleClass(domContents[i],'expanded'); toggleClass(domHeaders[i],'active-header');}else if(getParentId(domContents[i].id)==getParentId(toCollapse) && domContents[i].obj.className.indexOf('expanded') > -1){toggleClass(domContents[i],'expanded'); toggleClass(domHeaders[i],'active-header');}}toCollapse=getParentId(toCollapse);}while (getLevel(toCollapse) !=stopLevel);}; /* * @ngdoc function * @name getLevel * @description gets the level of an element given its id * @param{String}id * @return{String}*/ var getLevel=function(id){if (id=='0') return 0; else return id.split('-').length;}; /* * @ngdoc function * @name getParentId * @description gets the parent id given an id * @param{String}id * @return{String}*/ var getParentId=function(id){if(id.indexOf('-')==-1){return '0';}var lastChar=''; do{lastChar=id.substr(id.length -1); id=id.slice(0,-1);}while (lastChar !='-'); id=id.replace('sac',''); return id;}; /* * @ngdoc function * @name toggleClass * @description add or removes a class given a domObject and a class * @param{Object}domContent * @return{String}toggleClass */ var toggleClass=function (domContent,toggleClass){if (domContent.obj.className.indexOf(toggleClass) > -1){domContent.obj.className=domContent.obj.className.replace(toggleClass,''); if (scope.config.debug) console.log('removing class ' + domContent.id); if (toggleClass=="expanded"){setContentHeight(domContent,0);}return false;}else{domContent.obj.className=trim(domContent.obj.className) + ' ' + toggleClass; if (scope.config.debug) console.log('adding class ' + domContent.id); if (toggleClass=="expanded"){var height=domContent.obj.firstChild.offsetHeight || domContent.obj.firstElementChild.offsetHeight; setContentHeight(domContent,height);}return true;}}; /* * @ngdoc function * @name isParent * @description Checks if a content is parent of another given 2 ids * @param{parentId}* @param{childId}* @return{Boolean}*/ var isParent=function (parentId,childId){do{if (getParentId(childId)==parentId) return true; childId=getParentId(childId);}while(getLevel(childId) > getLevel(parentId)); return false;}; /* * @ngdoc function * @name trim * @description removes leading and trailing blank spaces out of a String * @param{String}str * @return{String}*/ var trim=function (str){var str=str.replace(/^\s\s*/, ''), ws=/\s/, i=str.length; while (ws.test(str.charAt(--i))); return str.slice(0, i + 1);}; /* * @ngdoc function * @name getContentStyleHeight * @description Removes the trailing 'px' of an element height * @param{DomObject}domObject * @return{String}Height */ var getContentStyleHeight=function(domObject){return domObject.style.height.substr(0,domObject.style.height.length - 2);}; /* * @ngdoc function * @name setContentHeight * @description Handles element height when it collapses or expands. Also handles animations if active * @param{Object}domContent * @param{String}height * @return */ var setContentHeight=function(domContent,height){animating.push(domContent.id); $timeout(function(){animating=[]; domContent.obj.style.transition='height 0s'; if (domContent.obj.style.height !='0px'){domContent.obj.style.height='auto';}if (!scope.config.autoCollapse){//cleanAutoHeight();}}, animDur); domContent.obj.style.transition='height ' + animDur + 'ms'; if (animDur){$timeout(function(){domContent.obj.style.height=height + 'px'; //alert(domContent.id + ' altura' + height);}, 80);}else{domContent.obj.style.height=height + 'px';}}; /* * @ngdoc function * @name getDomContetsIndex * @description Gets an domContent index inside contents array given its id * @param{String}id * @return{Integer}i */ var getDomContentsIndex=function(id){for (var i=domContents.length - 1; i >=0; i--){if (domContents[i].id==('sac' + id) || domContents[i].id==(id)) return i;}return -1;}; /* * @ngdoc function * @name cleanAutoHeight * @description Checks domContents and sets height to px when height is==auto * @param * @return */ var cleanAutoHeight=function(){for (var i=domContents.length - 1; i >=0; i--){if (domContents[i].obj.style.height=='auto'){var height=domContents[i].obj.firstChild.offsetHeight || domContents[i].obj.firstElementChild.offsetHeight; domContents[i].obj.style.height=height + 'px'; //alert(domContents[i].id + ' altura' + height);}};}; /* * @ngdoc function * @name setAutoHeight * @description Checks domContents and sets height to auto when height is !=0 */ var setAutoHeight=function(){for (var i=domContents.length - 1; i >=0; i--){if (domContents[i].obj.style.height !='0px' && domContents[i].obj.style.height){var domObject=domContents[i].obj; var height=domObject.firstChild.offsetHeight || domObject.firstElementChild.offsetHeight; domObject.style.height='auto';}};}; /* * @ngdoc function * @name closeOpenChilds * @description Checks domContents and closes the child elements given an id * @param{Object}domContents * @id{String}id */ var closeOpenChilds=function(domContents, id){for (var i=domContents.length - 1; i >=0; i--){if (isParent(id,domContents[i].id) && domContents[i].obj.className.indexOf('expanded') > -1){toggleClass(domContents[i],'expanded'); toggleClass(domHeaders[i],'active-header');}};}; /* * @ngdoc function * @name expandCollapse * @description Expands an element * @param{String}id */ var expandCollapse=function(id){var idIndex=getDomContentsIndex(id); var currentExpandedIndex=getDomContentsIndex(currentExpanded); var domContent=domContents[idIndex]; var domHeader=domHeaders[idIndex]; var height=domContent.obj.firstChild.offsetHeight || domContent.obj.firstElementChild.offsetHeight; //if (domContent.id && isAnimating(domContent.id)) return; cleanAutoHeight(); if (scope.config.autoCollapse){if (currentExpanded=='0'){toggleClass(domHeader, 'active-header'); toggleClass(domContent,'expanded'); currentExpanded=id; if (scope.config.debug) console.log('%c Opening First',consoleHighLight); if (scope.config.debug) console.log('From 0 to ' + currentExpanded); return;}if (currentExpanded==id){toggleClass(domContent,'expanded'); toggleClass(domHeader,'active-header'); currentExpanded=getParentId(id) || '0'; while (getLevel(domContent.id) >=2){domContent=domContents[getDomContentsIndex(getParentId(domContent.id))]; setContentHeight(domContent,domContent.obj.offsetHeight - height);}if (scope.config.debug) console.log('%c Closing same',consoleHighLight); if (scope.config.debug) console.log('From current element to ' + currentExpanded); return;}if (currentExpanded !=id){if(getParentId(id)==currentExpanded){if (scope.config.debug) console.log('%c Opening Child',consoleHighLight); toggleClass(domContent,'expanded'); toggleClass(domHeader,'active-header'); currentExpanded=id; while (getLevel(domContent.id) >=2){domContent=domContents[getDomContentsIndex(getParentId(domContent.id))]; setContentHeight(domContent,domContent.obj.offsetHeight + height);}return;}else if(isParent(id,currentExpanded)){if (scope.config.debug) console.log('%c Closing Parent',consoleHighLight); chainCollapse(currentExpanded,getLevel(id)); toggleClass(domContent,'expanded'); toggleClass(domHeader,'active-header'); currentExpanded=getParentId(id); while (getLevel(domContent.id) >=2){domContent=domContents[getDomContentsIndex(getParentId(domContent.id))]; setContentHeight(domContent,domContent.obj.offsetHeight - height);}return;}else if(getParentId(currentExpanded)==getParentId(id)){if (scope.config.debug) console.log('%c Opening sibling',consoleHighLight); var currentExpandedHeight=getContentStyleHeight(domContents[currentExpandedIndex].obj); toggleClass(domContents[currentExpandedIndex],'expanded'); toggleClass(domHeaders[currentExpandedIndex], 'active-header'); toggleClass(domHeader, 'active-header'); toggleClass(domContent,'expanded'); currentExpanded=id; while (getLevel(domContent.id) >=2){domContent=domContents[getDomContentsIndex(getParentId(domContent.id))]; setContentHeight(domContent,domContent.obj.offsetHeight + height - currentExpandedHeight);}return;}else{if (scope.config.debug) console.log('%c Opening other',consoleHighLight); if (getLevel(id) >=2){var auxCurrentExpanded=domContents[getDomContentsIndex(getParentId(currentExpanded))]; var auxDomContent=domContents[getDomContentsIndex(getParentId(domContent.id))]; while (getLevel(auxCurrentExpanded.id) > getLevel(id)){auxCurrentExpanded=domContents[getDomContentsIndex(getParentId(auxCurrentExpanded.id))];}while (auxDomContent && getLevel(auxDomContent.id) >=1){setContentHeight(auxDomContent,auxDomContent.obj.offsetHeight + height - auxCurrentExpanded.obj.offsetHeight); auxDomContent=domContents[getDomContentsIndex(getParentId(auxDomContent.id))];}}chainCollapse(currentExpanded,getLevel(getParentId(id))); toggleClass(domHeader,'active-header'); currentExpanded=id; toggleClass(domContent,'expanded'); return;}return false;}}else{if(domContent.obj.className.indexOf('expanded') > -1){closeOpenChilds(domContents,id);}var expanded=toggleClass(domContent,'expanded'); toggleClass(domHeader, 'active-header'); while (getLevel(domContent.id) >=2){domContent=domContents[getDomContentsIndex(getParentId(domContent.id))]; if (expanded){setContentHeight(domContent,domContent.obj.offsetHeight + height);}else{setContentHeight(domContent,domContent.obj.offsetHeight - height);}}currentExpanded=id; return;}}/* * @ngdoc function * @name expandCollapseWithParents * @description Expands an element recursively including its parents * @param{String}id */ var expandCollapseWithParents=function(id){animDur=0; var ids=id.split('-'); var thisId=''; for (var i=0; i < ids.length; i++){for (var j=0; j <=i; j++){if (j){thisId=thisId + '-' + ids[j];}else{thisId=ids[j];}}; if(domContents[getDomContentsIndex(thisId)].obj.className.indexOf('expanded')==-1){expandCollapse(thisId);}thisId='';}; $timeout(function(){animDur=scope.config.animDur;}, scope.config.animDur);}; scope.expandCollapse=function(id){expandCollapse(id);}; /* * @ngdoc event * @name sacCollapseAll * @description collapses all accordion contents */ scope.$on('sacCollapseAll', function (event){cleanAutoHeight(); if (!scope.config.autoCollapse){for (var i=domContents.length - 1; i >=0; i--){if (domContents[i].obj.className.indexOf('expanded') > -1){toggleClass(domHeaders[i], 'active-header'); toggleClass(domContents[i],'expanded');}};}event.defaultPrevented=true;}); /* * @ngdoc event * @name sacExpandAll * @description expands all accordion contents */ scope.$on('sacExpandAll', function (event,data){if (!scope.config.autoCollapse){animDur=0; for (var i=domContents.length - 1; i >=0; i--){if (domContents[i].obj.className.indexOf('expanded')==-1 && getLevel(domContents[i].id) > 1){toggleClass(domHeaders[i], 'active-header'); toggleClass(domContents[i],'expanded'); domContents[i].obj.style.height='auto';}}; animDur=scope.config.animDur; for (var i=domContents.length - 1; i >=0; i--){if(domContents[i].obj.className.indexOf('expanded')==-1 && getLevel(domContents[i].id)==1){toggleClass(domHeaders[i], 'active-header'); toggleClass(domContents[i],'expanded');}}}event.defaultPrevented=true;}); /* * @ngdoc event * @name sacExpandContentById * @description expands a content a all its parents given its id */ scope.$on('sacExpandContentById', function (event,id){expandCollapseWithParents(id); event.defaultPrevented=true;});}}}]);"use strict";angular.module("sir-accordion",[]).directive("sirAccordion",["$compile","$timeout",function(e,o){var n="";return{restrict:"A",scope:{collection:"=",config:"=?"},template:n,controller:["$scope",function(e){e.config={debug:"undefined"!=typeof e.config.debug?e.config.debug:!1,animDur:e.config.animDur>=200&&document.body.firstElementChild?e.config.animDur:0,expandFirst:"undefined"!=typeof e.config.expandFirst?e.config.expandFirst:!1,autoCollapse:"undefined"!=typeof e.config.autoCollapse?e.config.autoCollapse:!0,watchInternalChanges:"undefined"!=typeof e.config.watchInternalChanges?e.config.watchInternalChanges:!1,headerClass:e.config.headerClass||"",preHeader:e.config.preHeader||'<div class="sir-accordion-vertical-align"><div>',postHeader:e.config.postHeader||"</div></div>",topContentClass:e.config.topContentClass||"",preTopContent:e.config.preTopContent||"",postTopContent:e.config.postTopContent||"",bottomContentClass:e.config.bottomContentClass||"",preBottomContent:e.config.preBottomContent||"",postBottomContent:e.config.postBottomContent||""}}],link:function(n,t){var i=n.config.animDur,a="",d="",l="",r="",s="",c="",f=[],g=[],u=[],h="0",p="background: #0044CE; color: #fff",v=null;n.$watch("collection",function(){if(!angular.isArray(n.collection))return void t.html("No collection found");a="",d="",l="",r="",s="",c="",f=[],g=[],u=[],h="0",c=C(n.collection,0,0,0),t.html(""),v&&(v.$destroy(),v=null),v=n.$new();var o=e(c)(v);t.append(o),b(),n.$emit("sacDoneLoading")},n.config.watchInternalChanges);var b=function(){for(var e=null,o=null,n=null,t=g.length-1;t>=0;t--)e=document.getElementById("sac"+g[t]),o=e.firstElementChild?e.firstElementChild:e.firstChild,n=o.nextSibling,g[t]={id:e.id,obj:n},f[t]={id:e.id,obj:o},e.firstElementChild&&(g[t].obj.firstElementChild.style.transition="all "+(i-100)+"ms",f[t].obj.style.transition="all "+i+"ms")},C=function(e,o,t,i){return t==e.length?"":(s=i?String(o)+"-"+String(t+1):String(t+1),a=n.config.preHeader+e[t].title+n.config.postHeader,d=m(n.config.preTopContent,e[t].topContent,n.config.postTopContent),g.push(s),r='<div id="sac'+s+'" > <div class="sir-accordion-header '+n.config.headerClass+'" ng-click="expandCollapse(\''+s+"')\">"+a+'</div><div class="sir-accordion-content"> <div><div class="'+n.config.topContentClass+'">'+d+"</div>",0==t&&(r=0==i?'<div class="sir-accordion-wrapper">'+r:'<div class="sir-accordion-group">'+r),l=m(n.config.preBottomContent,e[t].bottomContent,n.config.postBottomContent),angular.isArray(e[t].subCollection)&&e[t].subCollection.length?(r+=C(e[t].subCollection,s,0,i+1),r=r+'</div><div class="'+n.config.bottomContentClass+'">'+l+"</div></div></div></div>"):r=r+'</div><div class="'+n.config.bottomContentClass+'">'+l+"</div></div></div>",r+C(e,o,t+1,i))},m=function(e,o,n){return o=o?e+o+n:""},x=function(e,o){n.config.debug&&console.log("Chain collapsing");do{for(var t=g.length-1;t>=0;t--)n.config.autoCollapse&&g[t].id=="sac"+e?(H(g[t],"expanded"),H(f[t],"active-header")):y(g[t].id)==y(e)&&g[t].obj.className.indexOf("expanded")>-1&&(H(g[t],"expanded"),H(f[t],"active-header"));e=y(e)}while(j(e)!=o)},j=function(e){return"0"==e?0:e.split("-").length},y=function(e){if(-1==e.indexOf("-"))return"0";var o="";do o=e.substr(e.length-1),e=e.slice(0,-1);while("-"!=o);return e=e.replace("sac","")},H=function(e,o){if(e.obj.className.indexOf(o)>-1)return e.obj.className=e.obj.className.replace(o,""),n.config.debug&&console.log("removing class "+e.id),"expanded"==o&&w(e,0),!1;if(e.obj.className=N(e.obj.className)+" "+o,n.config.debug&&console.log("adding class "+e.id),"expanded"==o){var t=e.obj.firstChild.offsetHeight||e.obj.firstElementChild.offsetHeight;w(e,t)}return!0},E=function(e,o){do{if(y(o)==e)return!0;o=y(o)}while(j(o)>j(e));return!1},N=function(e){for(var e=e.replace(/^\s\s*/,""),o=/\s/,n=e.length;o.test(e.charAt(--n)););return e.slice(0,n+1)},O=function(e){return e.style.height.substr(0,e.style.height.length-2)},w=function(e,t){u.push(e.id),o(function(){u=[],e.obj.style.transition="height 0s","0px"!=e.obj.style.height&&(e.obj.style.height="auto"),n.config.autoCollapse||D()},i),e.obj.style.transition="height "+i+"ms",i?o(function(){e.obj.style.height=t+"px"},80):e.obj.style.height=t+"px"},$=function(e){for(var o=g.length-1;o>=0;o--)if(g[o].id=="sac"+e||g[o].id==e)return o;return-1},B=function(){for(var e=g.length-1;e>=0;e--)if("auto"==g[e].obj.style.height){var o=g[e].obj.firstChild.offsetHeight||g[e].obj.firstElementChild.offsetHeight;g[e].obj.style.height=o+"px"}},D=function(){for(var e=g.length-1;e>=0;e--)if("0px"!=g[e].obj.style.height&&g[e].obj.style.height){{var o=g[e].obj;o.firstChild.offsetHeight||o.firstElementChild.offsetHeight}o.style.height="auto"}},A=function(e,o){for(var n=e.length-1;n>=0;n--)E(o,e[n].id)&&e[n].obj.className.indexOf("expanded")>-1&&(H(e[n],"expanded"),H(f[n],"active-header"))},F=function(e){var o=$(e),t=$(h),i=g[o],a=f[o],d=i.obj.firstChild.offsetHeight||i.obj.firstElementChild.offsetHeight;if(B(),!n.config.autoCollapse){i.obj.className.indexOf("expanded")>-1&&A(g,e);var l=H(i,"expanded");for(H(a,"active-header");j(i.id)>=2;)i=g[$(y(i.id))],l?w(i,i.obj.offsetHeight+d):w(i,i.obj.offsetHeight-d);return void(h=e)}if("0"==h)return H(a,"active-header"),H(i,"expanded"),h=e,n.config.debug&&console.log("%c Opening First",p),void(n.config.debug&&console.log("From 0 to "+h));if(h==e){for(H(i,"expanded"),H(a,"active-header"),h=y(e)||"0";j(i.id)>=2;)i=g[$(y(i.id))],w(i,i.obj.offsetHeight-d);return n.config.debug&&console.log("%c Closing same",p),void(n.config.debug&&console.log("From current element to "+h))}if(h!=e){if(y(e)==h){for(n.config.debug&&console.log("%c Opening Child",p),H(i,"expanded"),H(a,"active-header"),h=e;j(i.id)>=2;)i=g[$(y(i.id))],w(i,i.obj.offsetHeight+d);return}if(E(e,h)){for(n.config.debug&&console.log("%c Closing Parent",p),x(h,j(e)),H(i,"expanded"),H(a,"active-header"),h=y(e);j(i.id)>=2;)i=g[$(y(i.id))],w(i,i.obj.offsetHeight-d);return}if(y(h)==y(e)){n.config.debug&&console.log("%c Opening sibling",p);var r=O(g[t].obj);for(H(g[t],"expanded"),H(f[t],"active-header"),H(a,"active-header"),H(i,"expanded"),h=e;j(i.id)>=2;)i=g[$(y(i.id))],w(i,i.obj.offsetHeight+d-r);return}if(n.config.debug&&console.log("%c Opening other",p),j(e)>=2){for(var s=g[$(y(h))],c=g[$(y(i.id))];j(s.id)>j(e);)s=g[$(y(s.id))];for(;c&&j(c.id)>=1;)w(c,c.obj.offsetHeight+d-s.obj.offsetHeight),c=g[$(y(c.id))]}return x(h,j(y(e))),H(a,"active-header"),h=e,void H(i,"expanded")}},I=function(e){i=0;for(var t=e.split("-"),a="",d=0;d<t.length;d++){for(var l=0;d>=l;l++)a=l?a+"-"+t[l]:t[l];-1==g[$(a)].obj.className.indexOf("expanded")&&F(a),a=""}o(function(){i=n.config.animDur},n.config.animDur)};n.expandCollapse=function(e){F(e)},n.$on("sacCollapseAll",function(e){if(B(),!n.config.autoCollapse)for(var o=g.length-1;o>=0;o--)g[o].obj.className.indexOf("expanded")>-1&&(H(f[o],"active-header"),H(g[o],"expanded"));e.defaultPrevented=!0}),n.$on("sacExpandAll",function(e){if(!n.config.autoCollapse){i=0;for(var o=g.length-1;o>=0;o--)-1==g[o].obj.className.indexOf("expanded")&&j(g[o].id)>1&&(H(f[o],"active-header"),H(g[o],"expanded"),g[o].obj.style.height="auto");i=n.config.animDur;for(var o=g.length-1;o>=0;o--)-1==g[o].obj.className.indexOf("expanded")&&1==j(g[o].id)&&(H(f[o],"active-header"),H(g[o],"expanded"))}e.defaultPrevented=!0}),n.$on("sacExpandContentById",function(e,o){I(o),e.defaultPrevented=!0})}}}]);